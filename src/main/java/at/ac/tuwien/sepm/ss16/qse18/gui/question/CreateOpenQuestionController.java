package at.ac.tuwien.sepm.ss16.qse18.gui.question;

import at.ac.tuwien.sepm.ss16.qse18.domain.Answer;
import at.ac.tuwien.sepm.ss16.qse18.domain.Question;
import at.ac.tuwien.sepm.ss16.qse18.domain.QuestionType;
import at.ac.tuwien.sepm.ss16.qse18.service.QuestionService;
import at.ac.tuwien.sepm.ss16.qse18.service.ServiceException;
import at.ac.tuwien.sepm.util.AlertBuilder;
import at.ac.tuwien.sepm.util.SpringFXMLLoader;
import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.util.LinkedList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Controller for managing the creation of open questions
 * <p>
 * Created by Julian on 15.05.2016.
 */
@Component public class CreateOpenQuestionController extends QuestionController {

    private Logger logger = LogManager.getLogger(CreateMultipleChoiceQuestionController.class);

    @FXML private TextArea textAreaQuestion;
    @FXML private TextField textfieldAnswerOne;
    @FXML private TextField textfieldAnswerTwo;
    @FXML private TextField textfieldAnswerThree;
    @FXML private TextField textfieldAnswerFour;
    @FXML private CheckBox checkBoxContinue;

    @Autowired
    public CreateOpenQuestionController(QuestionService questionService, AlertBuilder alertBuilder,
        SpringFXMLLoader fxmlLoader) {
        super(questionService, alertBuilder, fxmlLoader);
    }

    @Override protected void fillFieldsAndCheckboxes() {
        // TODO: make this view fill its fields and checkboxes
    }

    @Override protected List getUserInput() {
        // TODO: read user input and save it in inputs
        return null;
    }

    /**
     * Handles the button event of the "create question" button.
     */
    @FXML public void handleCreateQuestion() {
        if (!createQuestion()) {
            return;
        }
        if (checkBoxContinue.isSelected()) {
            mainFrameController.handleOpenQuestion(this.topic);
        } else {
            mainFrameController.handleSubjects();
        }
        showSuccess("Inserted new question into database.");
    }

    /**
     * Creates a new question.
     *
     * @return true if creation was successful, false else.
     */
    private boolean createQuestion() {
        logger.info("Creating new question");
        Question newQuestion;
        try {
            List<Answer> answers = newAnswersFromField();
            newQuestion = questionService.createQuestion(newQuestionFromField(), topic.getT());
            questionService.setCorrespondingAnswers(newQuestion, answers);
        } catch (ServiceException e) {
            showAlert(e);
            return false;
        }
        return true;
    }

    /**
     * Returns a question generated by the user input.
     *
     * @return generated question
     * @throws ServiceException
     */
    private Question newQuestionFromField() throws ServiceException {
        logger.info("Collecting question from field.");
        if (textAreaQuestion.getText().isEmpty()) {
            throw new ServiceException("The question must not be empty.");
        }
        return new Question(textAreaQuestion.getText(), QuestionType.OPENQUESTION, 1L);
    }

    /**
     * Returns a list of answers (keywords) generated by the user input.
     * List size can be [0,4] depending on the modified text fields.
     *
     * @return list of answers (keywords)
     * @throws ServiceException
     */
    private List<Answer> newAnswersFromField() throws ServiceException {
        logger.info("Collecting keywords from fields");
        List<Answer> newAnswers = new LinkedList<>();
        if (!textfieldAnswerOne.getText().isEmpty()) {
            checkKeywordForSpaces(textfieldAnswerOne.getText());
            newAnswers
                .add(new Answer(QuestionType.OPENQUESTION, textfieldAnswerOne.getText(), true));
        }
        if (!textfieldAnswerTwo.getText().isEmpty()) {
            checkKeywordForSpaces(textfieldAnswerTwo.getText());
            newAnswers
                .add(new Answer(QuestionType.OPENQUESTION, textfieldAnswerTwo.getText(), true));
        }
        if (!textfieldAnswerThree.getText().isEmpty()) {
            checkKeywordForSpaces(textfieldAnswerThree.getText());
            newAnswers
                .add(new Answer(QuestionType.OPENQUESTION, textfieldAnswerThree.getText(), true));
        }
        if (!textfieldAnswerFour.getText().isEmpty()) {
            checkKeywordForSpaces(textfieldAnswerFour.getText());
            newAnswers
                .add(new Answer(QuestionType.OPENQUESTION, textfieldAnswerFour.getText(), true));
        }
        if (newAnswers.isEmpty()) {
            logger.info("No keyword was given.");
            throw new ServiceException("At least one keyword must be given.");
        }
        return newAnswers;
    }

    /**
     * Checks if a keyword is valid. A keyword is valid if it contains no white spaces.
     *
     * @param keyword keyword to check
     * @throws ServiceException
     */
    private void checkKeywordForSpaces(String keyword) throws ServiceException {
        logger.info("Validating keyword: " + keyword);
        Pattern p = Pattern.compile("\\s");
        Matcher m = p.matcher(keyword);
        if (m.find()) {
            logger.info(keyword + "is not a valid keyword.");
            throw new ServiceException(keyword + " is not a valid keyword. ");
        }
        logger.info(keyword + "is a valid keyword.");
    }
}

